nts __IntDualyzer_quicksort ; 
validity__dim_,dim: int;
NonDetInt{

out ndet,validity_ndet_: int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { havoc(ndet,validity_ndet_) }
}
__NdetValInRange{
in lowerb,lbval,upperb,upbval: int;

out ndval,ndvalid: int;
initial sinit;
final s1;
 
 sinit->s1 { ndval' <=  upperb and ndval' >= lowerb and ndvalid' = 1 and havoc(ndval,ndvalid) }
}
__VERIFIER_nondet_int{

out ndet,validity_ndet_: int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { havoc(ndet,validity_ndet_) }
}
__assert_fail{
in a,b,c,d,e,f,g,h: int;

initial sinit;
final none;
error s0; 
 sinit->s0 { havoc() }
}
__builtin_alloca{
in x,val_x: int;

out y,vx: int;
initial sinit;
final sfinal;
 
 sinit->sfinal { y' = x and vx' = val_x and havoc(y,vx) }
}
abs{
in x,val: int;

out y,val_y: int;
initial sinit;
final sfinal;
 
 sinit->sfinal { x >= 0 and y' = x and val_y' = val and havoc(y,val_y) } 
 sinit->sfinal { x < 0 and y' = -x and val_y' = val and havoc(y,val_y) }
}
changeM{
in offset__a_,validity__a_,m,validity__m_,i,validity__i_,h,validity__h_,v,validity__v_: int;

__if_ndet_cond__: int;
out ret_val_,validity__ret_val__: int;
initial sinit;
final s14;
error s11,s13,s16,s18,s19,s21,s23,s25,s28,s5,s7; 
 s0->s1 { havoc() } 
 s1->s2 { havoc() } 
 s10->s15 { havoc() } 
 s12->s15 { i >= dim and havoc() } 
 s12->s17 { i < dim and havoc() } 
 s15->sinter0 { havoc() } 
 s17->s24 { __if_ndet_cond__ != 0 and i' = i+1 and havoc(__if_ndet_cond__,i) } 
 s17->sinter1 { __if_ndet_cond__ = 0 and havoc(__if_ndet_cond__) } 
 s17->sinter2 { __if_ndet_cond__ = 0 and havoc(__if_ndet_cond__) } 
 s2->s3 { havoc() } 
 s20->s17 { havoc() } 
 s22->s26 { m' = m+1 and havoc(m) } 
 s24->s27 { havoc() } 
 s26->s29 { i' = i+1 and havoc(i) } 
 s27->s2 { havoc() } 
 s29->s30 { havoc() } 
 s3->s4 { i <=  h and havoc() } 
 s3->s6 { i > h and havoc() } 
 s30->s2 { havoc() } 
 s4->s8 { havoc() } 
 s6->s9 { havoc() } 
 s8->s10 { i < 0 and havoc() } 
 s8->s12 { i >= 0 and havoc() } 
 s9->s14 { ret_val_' = m and havoc(ret_val_) } 
 sinit->s0 {  } 
 sinter0->s20 { error_() and havoc() } 
 sinter1->s22 { swap(offset__a_,-1,m+1,-1,i,-1) and havoc() } 
 sinter2->s22 { swap(offset__a_,-1,m+1,-1,i,-1) and havoc() }
}
error_{

_ndet_arg_0,_ndet_arg_1,_ndet_arg_2: int;
initial sinit;
final no_rechable_final_state;
error s1,s2; 
 s0->sinter0 { havoc(_ndet_arg_1,_ndet_arg_2) } 
 sinit->s0 {  } 
 sinter0->s2 { __assert_fail(_ndet_arg_0,1,_ndet_arg_1,1,9,1,_ndet_arg_2,1) and havoc() }
}
main{

__retres,_ndet_arg_0,mid_1_size,mid_2_size: int;
out ret_val_,validity__ret_val__: int;
initial sinit;
final s25;
error s1,s11,s13,s15,s17,s19,s21,s23,s3,s5,s7,s9; 
 s0->s1 { not (0 < 10 and 0 >= 0) and havoc() } 
 s0->s2 { 0 < 10 and 0 >= 0 and havoc() } 
 s10->s11 { not (5 < 10 and 5 >= 0) and havoc() } 
 s10->s12 { 5 < 10 and 5 >= 0 and havoc() } 
 s12->s13 { not (6 < 10 and 6 >= 0) and havoc() } 
 s12->s14 { 6 < 10 and 6 >= 0 and havoc() } 
 s14->s15 { not (7 < 10 and 7 >= 0) and havoc() } 
 s14->s16 { 7 < 10 and 7 >= 0 and havoc() } 
 s16->s17 { not (8 < 10 and 8 >= 0) and havoc() } 
 s16->s18 { 8 < 10 and 8 >= 0 and havoc() } 
 s18->s19 { not (9 < 10 and 9 >= 0) and havoc() } 
 s18->s20 { 9 < 10 and 9 >= 0 and havoc() } 
 s2->s3 { not (1 < 10 and 1 >= 0) and havoc() } 
 s2->s4 { 1 < 10 and 1 >= 0 and havoc() } 
 s20->sinter0 { havoc() } 
 s22->s24 { __retres' = 0 and havoc(__retres) } 
 s24->s25 { ret_val_' = __retres and havoc(ret_val_) } 
 s4->s5 { not (2 < 10 and 2 >= 0) and havoc() } 
 s4->s6 { 2 < 10 and 2 >= 0 and havoc() } 
 s6->s7 { not (3 < 10 and 3 >= 0) and havoc() } 
 s6->s8 { 3 < 10 and 3 >= 0 and havoc() } 
 s8->s10 { 4 < 10 and 4 >= 0 and havoc() } 
 s8->s9 { not (4 < 10 and 4 >= 0) and havoc() } 
 sinit->s0 { mid_1_size' = 10*4 and mid_2_size' = 10*4 } 
 sinter0->s22 { quick_sort(_ndet_arg_0,1,0,1,dim-1,-1) and havoc() }
}
memcpy{
in dest_off,dest_val,src_off,srv_val,sizein,size_val: int;

out ret_addr,valid_ret: int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { ret_addr' = dest_off and valid_ret' = dest_val and havoc(ret_addr,valid_ret) }
}
partition{
in offset__a_,validity__a_,l,validity__l_,h,validity__h_: int;

v,j,m,validity__m_: int;
out ret_val_,validity__ret_val__: int;
initial sinit;
final s18;
error s10,s12,s14,s16,s3,s5,s7,s8; 
 s0->s1 { havoc() } 
 s1->s2 { l < 0 and havoc() } 
 s1->s4 { l >= 0 and havoc() } 
 s11->s9 { havoc(v) } 
 s13->sinter1 { havoc() } 
 s15->sinter2 { havoc() } 
 s17->s18 { ret_val_' = m and havoc(ret_val_) } 
 s2->s6 { havoc() } 
 s4->s6 { l >= dim and havoc() } 
 s4->s9 { l < dim and havoc(v) } 
 s6->sinter0 { havoc() } 
 s9->s13 { j' = l+1 and havoc(j) } 
 sinit->s0 {  } 
 sinter0->s11 { error_() and havoc() } 
 sinter1->s15 { (m',validity__m_')=changeM(offset__a_,-1,l,-1,j,-1,h,-1,v,-1) and havoc(m,validity__m_) } 
 sinter2->s17 { swap(offset__a_,-1,l,-1,m,0) and havoc() }
}
printf{
in a,b,c,d: int;

out off,val: int;
initial sinit;
final sfinal;
 
 sinit->sfinal { havoc(off,val) }
}
quick_sort{
in offset__a_,validity__a_,l,validity__l_,h,validity__h_: int;

p,validity__p_: int;
initial sinit;
final s4;
error s2,s5,s6,s8; 
 s0->s1 { havoc() } 
 s1->s4 { l >= h and havoc() } 
 s1->sinter0 { l < h and havoc() } 
 s3->sinter1 { havoc() } 
 s7->sinter2 { havoc() } 
 s9->s4 { havoc() } 
 sinit->s0 {  } 
 sinter0->s3 { (p',validity__p_')=partition(offset__a_,-1,l,-1,h,-1) and havoc(p,validity__p_) } 
 sinter1->s7 { quick_sort(offset__a_,-1,l,-1,p-1,0) and havoc() } 
 sinter2->s9 { quick_sort(offset__a_,-1,p+1,0,h,-1) and havoc() }
}
strlen{
in ptr_off,ptr_valid: int;

out len,valid_len: int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { valid_len' = ptr_valid and havoc(valid_len,len) }
}
strstr{
in a,b,c,d: int;

out off,val: int;
initial sinit;
final sfinal;
 
 sinit->sfinal { val' = b and havoc(off,val) }
}
swap{
in offset__a_,validity__a_,i,validity__i_,j,validity__j_: int;

t: int;
initial sinit;
final s44;
error s10,s14,s16,s18,s20,s21,s24,s26,s28,s29,s3,s31,s35,s37,s39,s40,s42,s5,s7,s8; 
 s0->s1 { havoc() } 
 s1->s2 { i < 0 and havoc() } 
 s1->s4 { i >= 0 and havoc() } 
 s11->s9 { havoc(t) } 
 s12->s13 { i < 0 and havoc() } 
 s12->s15 { i >= 0 and havoc() } 
 s13->s17 { havoc() } 
 s15->s17 { i >= dim and havoc() } 
 s15->s19 { i < dim and havoc() } 
 s17->sinter1 { havoc() } 
 s19->s23 { j < 0 and havoc() } 
 s19->s25 { j >= 0 and havoc() } 
 s2->s6 { havoc() } 
 s22->s19 { havoc() } 
 s23->s27 { havoc() } 
 s25->s27 { j >= dim and havoc() } 
 s25->s30 { j < dim and havoc() } 
 s27->sinter2 { havoc() } 
 s30->s33 { havoc() } 
 s32->s30 { havoc() } 
 s33->s34 { j < 0 and havoc() } 
 s33->s36 { j >= 0 and havoc() } 
 s34->s38 { havoc() } 
 s36->s38 { j >= dim and havoc() } 
 s36->s41 { j < dim and havoc() } 
 s38->sinter3 { havoc() } 
 s4->s6 { i >= dim and havoc() } 
 s4->s9 { i < dim and havoc(t) } 
 s41->s44 { havoc() } 
 s43->s41 { havoc() } 
 s6->sinter0 { havoc() } 
 s9->s12 { havoc() } 
 sinit->s0 {  } 
 sinter0->s11 { error_() and havoc() } 
 sinter1->s22 { error_() and havoc() } 
 sinter2->s32 { error_() and havoc() } 
 sinter3->s43 { error_() and havoc() }
}

 